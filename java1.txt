package task1;

import java.*;
import java.util.concurrent.Semaphore;
import java.util.Scanner;
import java.util.Date;

public class SemaphoreTest {
	

	public static int neon=0;
	static Semaphore semaphore = new Semaphore(1);
	

	public static void main(String[] args) {

		System.out.println("Total available Semaphore permits : "
				+ semaphore.availablePermits());
		System.out.println("enter the number of north farmers (N=)");
		Scanner obj= new Scanner(System.in);
		int N= obj.nextInt();
		System.out.println("enter the number of south farmers (S=)");
		//Scanner S= new Scanner(System.in);
		int S= obj.nextInt();
		
		for (int j=1;j<=N;j++) {
			
			MyATMThread t1 = new MyATMThread("N_farmer"+j);	
			t1.start();			
			 t1.dest="South";	
		}
		for (int k=1;k<=S;k++) {
			
			MyATMThread t2= new MyATMThread("S_farmer"+k);
			t2.start();
			t2.dest="North";
			 
			
		}


	}

	static class MyATMThread extends Thread implements Runnable{

		String name = "";
		String dest="";
		MyATMThread(String name) {
			this.name = name;
		}
		public MyATMThread() {
			setDaemon(true);
			start();
		}
		public void run() {
			while (true) {
			try {


				
				System.out.println(name + " : available passing permits now: "
								+ semaphore.availablePermits());

				semaphore.acquire();
				System.out.println(name + " : got the permit!");

				try {
					int i=0;

					for (i = 5; i <= 20; i=i+5) {

						System.out.println(name + " : crossing the bridge::Step " + i);
						if (i==20)
							{
							
							System.out.println("NEON="+ ++neon);
							if (this.dest=="North"){
									this.dest="South";
												
							}
							else if (this.dest=="South"){
								this.dest="North";
								
							}
							}
						// sleep .5 second
						
					
						Thread.sleep(500);

					}

				} finally {
					
					// calling release() after a successful acquire()
					System.out.println(name + " Across the bridge: releasing the access to the bridge...");
					semaphore.release();
					System.out.println(this.name + " Waiting for Bridge. going towards "+ this.dest);			
				}
				

			} catch (InterruptedException e) {
				
				e.printStackTrace();
			
			}

		}

		
		}
	

	
	
	}
}